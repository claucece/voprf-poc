{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1","program":"/Users/alxdavids/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--edition=2018","--crate-name","rand_core","/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"alloc\"","--cfg","feature=\"getrandom\"","--cfg","feature=\"std\"","-C","metadata=3cf71d4570c5e3aa","-C","extra-filename=-3cf71d4570c5e3aa","--out-dir","/Users/alxdavids/work/oprf-poc/rust/target/rls/debug/deps","-L","dependency=/Users/alxdavids/work/oprf-poc/rust/target/rls/debug/deps","--extern","getrandom=/Users/alxdavids/work/oprf-poc/rust/target/rls/debug/deps/libgetrandom-7d39fe1d0e2fc517.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/alxdavids/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/alxdavids/work/oprf-poc/rust/target/rls/debug/deps/librand_core-3cf71d4570c5e3aa.rmeta"},"prelude":{"crate_id":{"name":"rand_core","disambiguator":[2908995896748895301,8152313355267178618]},"crate_root":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src","external_crates":[{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[8779741827445714399,2971442221542141864]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[7813189136024418800,78221803746871164]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[16521422805528300375,16247103097443080165]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[6928156699021243209,6323046913247974479]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[4811915239047079672,8708313805612610773]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[13085082768306091680,910093795681734952]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[2050644147766463415,2002930350033655713]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[14957238024130938343,16286068292701033760]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[2942731912066483547,10101170281504604302]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8070830940391524888,2695343388122831199]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":11,"id":{"name":"backtrace","disambiguator":[12638767748722904428,1875285310507904094]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[1627492573080997141,12282998569957683394]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":13,"id":{"name":"backtrace_sys","disambiguator":[14201820458053457770,5396282292866328666]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","num":14,"id":{"name":"panic_unwind","disambiguator":[15969411139319329997,10460457787527223378]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","num":15,"id":{"name":"getrandom","disambiguator":[7964973279489530704,15194779289977351182]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","num":16,"id":{"name":"cfg_if","disambiguator":[11803371033530858062,9858489373789333621]}},{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","num":17,"id":{"name":"libc","disambiguator":[5561666264878161256,12604914797510705978]}}],"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":408,"byte_end":19375,"line_start":10,"line_end":492,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":20},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1842,"byte_end":1847,"line_start":50,"line_end":50,"column_start":16,"column_end":21},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":210},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1889,"byte_end":1894,"line_start":51,"line_end":51,"column_start":41,"column_end":46},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":408,"byte_end":19375,"line_start":10,"line_end":492,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":47},{"krate":0,"index":111},{"krate":0,"index":132},{"krate":0,"index":137},{"krate":0,"index":150},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":165},{"krate":0,"index":172},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":183}],"decl_id":null,"docs":" Random number generation traits","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1387,"byte_end":1409,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1410,"byte_end":1449,"line_start":35,"line_end":35,"column_start":1,"column_end":40}},{"value":"allow(clippy :: unreadable_literal)","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1512,"byte_end":1549,"line_start":38,"line_end":38,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":20},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20061,"byte_end":20066,"line_start":20,"line_end":20,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":21}],"decl_id":null,"docs":" Error type of random number generators","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":23},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20490,"byte_end":20493,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"fn <E> (err: E) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Construct from any type supporting `std::error::Error`\n \n Available only when configured with `std`.\n \n See also `From<NonZeroU32>`, which is available with and without `std`.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20443,"byte_end":20464,"line_start":33,"line_end":33,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20469,"byte_end":20478,"line_start":34,"line_end":34,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20883,"byte_end":20888,"line_start":47,"line_end":47,"column_start":12,"column_end":17},"name":"inner","qualname":"<Error>::inner","value":"fn (&self) -> &(dyn std::error::Error + Send + Sync + 'static)","parent":null,"children":[],"decl_id":null,"docs":" Reference the inner error (`std` only)\n \n When configured with `std`, this is a trivial operation and never\n panics. Without `std`, this method is simply unavailable.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20836,"byte_end":20857,"line_start":45,"line_end":45,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20862,"byte_end":20871,"line_start":46,"line_end":46,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21226,"byte_end":21236,"line_start":57,"line_end":57,"column_start":12,"column_end":22},"name":"take_inner","qualname":"<Error>::take_inner","value":"fn (self) -> Box<dyn std::error::Error + Send + Sync + 'static>","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the inner error (`std` only)\n \n When configured with `std`, this is a trivial operation and never\n panics. Without `std`, this method is simply unavailable.\n","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21179,"byte_end":21200,"line_start":55,"line_end":55,"column_start":5,"column_end":26}},{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21205,"byte_end":21214,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Const","id":{"krate":0,"index":27},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21561,"byte_end":21575,"line_start":64,"line_end":64,"column_start":15,"column_end":29},"name":"INTERNAL_START","qualname":"::error::Error::INTERNAL_START","value":"u32","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Codes below this point represent OS Errors (i.e. positive i32 values).\n Codes at or above this point, but below [`Error::CUSTOM_START`] are\n reserved for use by the `rand` and `getrandom` crates.\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":28},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":21708,"byte_end":21720,"line_start":68,"line_end":68,"column_start":15,"column_end":27},"name":"CUSTOM_START","qualname":"::error::Error::CUSTOM_START","value":"u32","parent":{"krate":0,"index":22},"children":[],"decl_id":null,"docs":" Codes at or above this point can be used by users to define their own\n custom errors.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22088,"byte_end":22100,"line_start":76,"line_end":76,"column_start":12,"column_end":24},"name":"raw_os_error","qualname":"<Error>::raw_os_error","value":"fn (&self) -> Option<i32>","parent":null,"children":[],"decl_id":null,"docs":" Extract the raw OS error code (if this error came from the OS)","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22067,"byte_end":22076,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22769,"byte_end":22773,"line_start":95,"line_end":95,"column_start":12,"column_end":16},"name":"code","qualname":"<Error>::code","value":"fn (&self) -> Option<NonZeroU32>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the error code, if any.\n \n If this `Error` was constructed via `From<NonZeroU32>`, then this method\n will return this `NonZeroU32` code (for `no_std` this is always the\n case). Otherwise, this method will return `None`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":22748,"byte_end":22757,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":47},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"block","qualname":"::block","value":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":52},{"krate":0,"index":57},{"krate":0,"index":60},{"krate":0,"index":193},{"krate":0,"index":198},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":73},{"krate":0,"index":80},{"krate":0,"index":201},{"krate":0,"index":207},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":96},{"krate":0,"index":102},{"krate":0,"index":109}],"decl_id":null,"docs":" The `BlockRngCore` trait and implementation helpers","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":60},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27426,"byte_end":27438,"line_start":64,"line_end":64,"column_start":11,"column_end":23},"name":"BlockRngCore","qualname":"::block::BlockRngCore","value":"BlockRngCore","parent":null,"children":[{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63}],"decl_id":null,"docs":" A trait for RNGs which do not generate random numbers individually, but in\n blocks (typically `[u32; N]`). This technique is commonly used by\n cryptographic RNGs to improve performance.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":61},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27492,"byte_end":27496,"line_start":66,"line_end":66,"column_start":10,"column_end":14},"name":"Item","qualname":"::block::BlockRngCore::Item","value":"type Item;","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Results element type, e.g. `u32`.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":62},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27653,"byte_end":27660,"line_start":70,"line_end":70,"column_start":10,"column_end":17},"name":"Results","qualname":"::block::BlockRngCore::Results","value":"type Results: AsRef<[Self::Item]> + AsMut<[Self::Item]> + Default;","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Results type. This is the 'block' an RNG implementing `BlockRngCore`\n generates, which will usually be an array like `[u32; 16]`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":27764,"byte_end":27772,"line_start":73,"line_end":73,"column_start":8,"column_end":16},"name":"generate","qualname":"::block::BlockRngCore::generate","value":"fn (&mut self, results: &mut Self::Results) -> ()","parent":{"krate":0,"index":60},"children":[],"decl_id":null,"docs":" Generate a new block of results.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":193},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29789,"byte_end":29797,"line_start":114,"line_end":114,"column_start":12,"column_end":20},"name":"BlockRng","qualname":"::block::BlockRng","value":"BlockRng { core }","parent":null,"children":[{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u32` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":197},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":29951,"byte_end":29955,"line_start":118,"line_end":118,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng::core","value":"R","parent":{"krate":0,"index":193},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30565,"byte_end":30568,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng<R>>::new","value":"fn (core: R) -> BlockRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30544,"byte_end":30553,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31043,"byte_end":31048,"line_start":151,"line_end":151,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng<R>>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31014,"byte_end":31031,"line_start":150,"line_end":150,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31239,"byte_end":31244,"line_start":158,"line_end":158,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31218,"byte_end":31227,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31437,"byte_end":31453,"line_start":165,"line_end":165,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng<R>>::generate_and_set","value":"fn (&mut self, index: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31416,"byte_end":31425,"line_start":164,"line_end":164,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":201},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35473,"byte_end":35483,"line_start":287,"line_end":287,"column_start":12,"column_end":22},"name":"BlockRng64","qualname":"::block::BlockRng64","value":"BlockRng64 { core }","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":206}],"decl_id":null,"docs":" A wrapper type implementing [`RngCore`] for some type implementing\n [`BlockRngCore`] with `u64` array buffer; i.e. this can be used to implement\n a full RNG from just a `generate` function.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":206},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35710,"byte_end":35714,"line_start":292,"line_end":292,"column_start":9,"column_end":13},"name":"core","qualname":"::block::BlockRng64::core","value":"R","parent":{"krate":0,"index":201},"children":[],"decl_id":null,"docs":" The *core* part of the RNG, implementing the `generate` function.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36378,"byte_end":36381,"line_start":311,"line_end":311,"column_start":12,"column_end":15},"name":"new","qualname":"<BlockRng64<R>>::new","value":"fn (core: R) -> BlockRng64<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `BlockRng` from an existing RNG implementing\n `BlockRngCore`. Results will be generated on first use.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36357,"byte_end":36366,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36890,"byte_end":36895,"line_start":327,"line_end":327,"column_start":12,"column_end":17},"name":"index","qualname":"<BlockRng64<R>>::index","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the index into the result buffer.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36861,"byte_end":36878,"line_start":326,"line_end":326,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37086,"byte_end":37091,"line_start":334,"line_end":334,"column_start":12,"column_end":17},"name":"reset","qualname":"<BlockRng64<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the number of available results.\n This will force a new set of results to be generated on next use.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37065,"byte_end":37074,"line_start":333,"line_end":333,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37316,"byte_end":37332,"line_start":342,"line_end":342,"column_start":12,"column_end":28},"name":"generate_and_set","qualname":"<BlockRng64<R>>::generate_and_set","value":"fn (&mut self, index: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Generate a new set of results immediately, setting the index to the\n given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37295,"byte_end":37304,"line_start":341,"line_end":341,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":111},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"impls","qualname":"::impls","value":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":119},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":130}],"decl_id":null,"docs":" Helper functions for implementing `RngCore` functions.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":117},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":41222,"byte_end":41238,"line_start":28,"line_end":28,"column_start":8,"column_end":24},"name":"next_u64_via_u32","qualname":"::impls::next_u64_via_u32","value":"fn <R> (rng: &mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `next_u32`, little-endian order.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":119},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":41785,"byte_end":41804,"line_start":41,"line_end":41,"column_start":8,"column_end":27},"name":"fill_bytes_via_next","qualname":"::impls::fill_bytes_via_next","value":"fn <R> (rng: &mut R, dest: &mut [u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` via `next_u64` and `next_u32`, little-endian order.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":126},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":44557,"byte_end":44576,"line_start":130,"line_end":130,"column_start":8,"column_end":27},"name":"fill_via_u32_chunks","qualname":"::impls::fill_via_u32_chunks","value":"fn (src: &[u32], dest: &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":127},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":45102,"byte_end":45121,"line_start":144,"line_end":144,"column_start":8,"column_end":27},"name":"fill_via_u64_chunks","qualname":"::impls::fill_via_u64_chunks","value":"fn (src: &[u64], dest: &mut [u8]) -> (usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Implement `fill_bytes` by reading chunks from the output buffer of a block\n based RNG.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":128},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":45286,"byte_end":45303,"line_start":149,"line_end":149,"column_start":8,"column_end":25},"name":"next_u32_via_fill","qualname":"::impls::next_u32_via_fill","value":"fn <R> (rng: &mut R) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u32` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":130},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/impls.rs","byte_start":45459,"byte_end":45476,"line_start":154,"line_end":154,"column_start":8,"column_end":25},"name":"next_u64_via_fill","qualname":"::impls::next_u64_via_fill","value":"fn <R> (rng: &mut R) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Implement `next_u64` via `fill_bytes`, little-endian order.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":132},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"le","qualname":"::le","value":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136}],"decl_id":null,"docs":" Little-Endian utilities\n \n Little-Endian order has been chosen for internal usage; this makes some\n useful functions available.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":135},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46625,"byte_end":46638,"line_start":35,"line_end":35,"column_start":8,"column_end":21},"name":"read_u32_into","qualname":"::le::read_u32_into","value":"fn (src: &[u8], dst: &mut [u32]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 32 bit integers from `src` into `dst`.\n Borrowed from the `byteorder` crate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46608,"byte_end":46617,"line_start":34,"line_end":34,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":136},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46826,"byte_end":46839,"line_start":42,"line_end":42,"column_start":8,"column_end":21},"name":"read_u64_into","qualname":"::le::read_u64_into","value":"fn (src: &[u8], dst: &mut [u64]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reads unsigned 64 bit integers from `src` into `dst`.\n Borrowed from the `byteorder` crate.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/le.rs","byte_start":46809,"byte_end":46818,"line_start":41,"line_end":41,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":210},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49429,"byte_end":49434,"line_start":48,"line_end":48,"column_start":12,"column_end":17},"name":"OsRng","qualname":"::os::OsRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A random number generator that retrieves randomness from from the\n operating system.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":150},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5179,"byte_end":5186,"line_start":137,"line_end":137,"column_start":11,"column_end":18},"name":"RngCore","qualname":"::RngCore","value":"RngCore","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154}],"decl_id":null,"docs":" The core of a random number generator.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":151},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5495,"byte_end":5503,"line_start":144,"line_end":144,"column_start":8,"column_end":16},"name":"next_u32","qualname":"::RngCore::next_u32","value":"fn (&mut self) -> u32","parent":{"krate":0,"index":150},"children":[],"decl_id":null,"docs":" Return the next random `u32`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":5841,"byte_end":5849,"line_start":152,"line_end":152,"column_start":8,"column_end":16},"name":"next_u64","qualname":"::RngCore::next_u64","value":"fn (&mut self) -> u64","parent":{"krate":0,"index":150},"children":[],"decl_id":null,"docs":" Return the next random `u64`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":6622,"byte_end":6632,"line_start":168,"line_end":168,"column_start":8,"column_end":18},"name":"fill_bytes","qualname":"::RngCore::fill_bytes","value":"fn (&mut self, dest: &mut [u8]) -> ()","parent":{"krate":0,"index":150},"children":[],"decl_id":null,"docs":" Fill `dest` with random data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":7359,"byte_end":7373,"line_start":183,"line_end":183,"column_start":8,"column_end":22},"name":"try_fill_bytes","qualname":"::RngCore::try_fill_bytes","value":"fn (&mut self, dest: &mut [u8]) -> Result<(), Error>","parent":{"krate":0,"index":150},"children":[],"decl_id":null,"docs":" Fill `dest` entirely with random data.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":155},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8662,"byte_end":8671,"line_start":208,"line_end":208,"column_start":11,"column_end":20},"name":"CryptoRng","qualname":"::CryptoRng","value":"CryptoRng","parent":null,"children":[],"decl_id":null,"docs":" A marker trait used to indicate that an [`RngCore`] or [`BlockRngCore`]\n implementation is supposed to be cryptographically secure.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":156},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8932,"byte_end":8943,"line_start":216,"line_end":216,"column_start":11,"column_end":22},"name":"SeedableRng","qualname":"::SeedableRng","value":"SeedableRng: Sized","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":162},{"krate":0,"index":164}],"decl_id":null,"docs":" A random number generator that can be explicitly seeded.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":157},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":10461,"byte_end":10465,"line_start":262,"line_end":262,"column_start":10,"column_end":14},"name":"Seed","qualname":"::SeedableRng::Seed","value":"type Seed: Sized + Default + AsMut<[u8]>;","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" Seed type, which is restricted to types mutably-dereferencable as `u8`\n arrays (we recommend `[u8; N]` for some `N`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12047,"byte_end":12056,"line_start":289,"line_end":289,"column_start":8,"column_end":17},"name":"from_seed","qualname":"::SeedableRng::from_seed","value":"fn (seed: Self::Seed) -> Self","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" Create a new PRNG using the given seed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":159},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":12873,"byte_end":12886,"line_start":305,"line_end":305,"column_start":8,"column_end":21},"name":"seed_from_u64","qualname":"::SeedableRng::seed_from_u64","value":"fn (mut state: u64) -> Self","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" Create a new PRNG using a `u64` seed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15181,"byte_end":15189,"line_start":355,"line_end":355,"column_start":8,"column_end":16},"name":"from_rng","qualname":"::SeedableRng::from_rng","value":"fn <R> (mut rng: R) -> Result<Self, Error>","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" Create a new PRNG seeded from another `Rng`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15975,"byte_end":15987,"line_start":376,"line_end":376,"column_start":8,"column_end":20},"name":"from_entropy","qualname":"::SeedableRng::from_entropy","value":"fn () -> Self","parent":{"krate":0,"index":156},"children":[],"decl_id":null,"docs":" Creates a new instance of the RNG seeded via [`getrandom`].","sig":null,"attributes":[{"value":"cfg(feature = \"getrandom\")","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":15940,"byte_end":15967,"line_start":375,"line_end":375,"column_start":5,"column_end":32}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20219,"byte_end":20224,"line_start":27,"line_end":27,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":23015,"byte_end":23020,"line_start":105,"line_end":105,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":23452,"byte_end":23457,"line_start":119,"line_end":119,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":23865,"byte_end":23870,"line_start":133,"line_end":133,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":37}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":24167,"byte_end":24172,"line_start":146,"line_end":146,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":39}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":24469,"byte_end":24474,"line_start":159,"line_end":159,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":41}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":24649,"byte_end":24654,"line_start":167,"line_end":167,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":25039,"byte_end":25048,"line_start":183,"line_end":183,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":25211,"byte_end":25220,"line_start":190,"line_end":190,"column_start":28,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30092,"byte_end":30100,"line_start":122,"line_end":122,"column_start":51,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30396,"byte_end":30404,"line_start":132,"line_end":132,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31663,"byte_end":31671,"line_start":172,"line_end":172,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":79}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":33878,"byte_end":33886,"line_start":242,"line_end":242,"column_start":53,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35851,"byte_end":35861,"line_start":296,"line_end":296,"column_start":51,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36207,"byte_end":36217,"line_start":307,"line_end":307,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37574,"byte_end":37584,"line_start":350,"line_end":350,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":39620,"byte_end":39630,"line_start":418,"line_end":418,"column_start":53,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":40068,"byte_end":40076,"line_start":437,"line_end":437,"column_start":49,"column_end":57},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49456,"byte_end":49461,"line_start":50,"line_end":50,"column_start":20,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49483,"byte_end":49488,"line_start":52,"line_end":52,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":17134,"byte_end":17137,"line_start":414,"line_end":414,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":18031,"byte_end":18034,"line_start":449,"line_end":449,"column_start":43,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1917,"byte_end":1922,"line_start":55,"line_end":55,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":47}},{"kind":"Mod","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1932,"byte_end":1937,"line_start":56,"line_end":56,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":111}},{"kind":"Mod","span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":1947,"byte_end":1949,"line_start":57,"line_end":57,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":132}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":20219,"byte_end":20224,"line_start":27,"line_end":27,"column_start":6,"column_end":11},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":20},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":23015,"byte_end":23020,"line_start":105,"line_end":105,"column_start":21,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":20},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":23452,"byte_end":23457,"line_start":119,"line_end":119,"column_start":23,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":20},"to":{"krate":2,"index":7190}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":23865,"byte_end":23870,"line_start":133,"line_end":133,"column_start":27,"column_end":32},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":20},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":24167,"byte_end":24172,"line_start":146,"line_end":146,"column_start":33,"column_end":38},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":20},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":24469,"byte_end":24474,"line_start":159,"line_end":159,"column_start":28,"column_end":33},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":20},"to":{"krate":1,"index":1559}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":24649,"byte_end":24654,"line_start":167,"line_end":167,"column_start":31,"column_end":36},"kind":{"Impl":{"id":6}},"from":{"krate":1,"index":2409},"to":{"krate":2,"index":2206}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":25039,"byte_end":25048,"line_start":183,"line_end":183,"column_start":23,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":185},"to":{"krate":2,"index":7190}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/error.rs","byte_start":25211,"byte_end":25220,"line_start":190,"line_end":190,"column_start":28,"column_end":37},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":185},"to":{"krate":1,"index":1559}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30092,"byte_end":30100,"line_start":122,"line_end":122,"column_start":51,"column_end":59},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":193},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":30396,"byte_end":30404,"line_start":132,"line_end":132,"column_start":23,"column_end":31},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":31663,"byte_end":31671,"line_start":172,"line_end":172,"column_start":45,"column_end":53},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":193},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":33878,"byte_end":33886,"line_start":242,"line_end":242,"column_start":53,"column_end":61},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":193},"to":{"krate":0,"index":156}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":35851,"byte_end":35861,"line_start":296,"line_end":296,"column_start":51,"column_end":61},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":201},"to":{"krate":2,"index":7185}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":36207,"byte_end":36217,"line_start":307,"line_end":307,"column_start":23,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":201},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":37574,"byte_end":37584,"line_start":350,"line_end":350,"column_start":45,"column_end":55},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":201},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":39620,"byte_end":39630,"line_start":418,"line_end":418,"column_start":53,"column_end":63},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":201},"to":{"krate":0,"index":156}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/block.rs","byte_start":40068,"byte_end":40076,"line_start":437,"line_end":437,"column_start":49,"column_end":57},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":193},"to":{"krate":0,"index":155}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49456,"byte_end":49461,"line_start":50,"line_end":50,"column_start":20,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":210},"to":{"krate":0,"index":155}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/os.rs","byte_start":49483,"byte_end":49488,"line_start":52,"line_end":52,"column_start":18,"column_end":23},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":210},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":8945,"byte_end":8950,"line_start":216,"line_end":216,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":2,"index":1540},"to":{"krate":0,"index":156}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":17134,"byte_end":17137,"line_start":414,"line_end":414,"column_start":39,"column_end":42},"kind":{"Impl":{"id":20}},"from":{"krate":5,"index":85},"to":{"krate":0,"index":150}},{"span":{"file_name":"/Users/alxdavids/.cargo/registry/src/github.com-1ecc6299db9ec823/rand_core-0.5.1/src/lib.rs","byte_start":18031,"byte_end":18034,"line_start":449,"line_end":449,"column_start":43,"column_end":46},"kind":{"Impl":{"id":21}},"from":{"krate":5,"index":85},"to":{"krate":0,"index":155}}]}